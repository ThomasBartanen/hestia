import { TabWidget, LineEdit, GridBox, ComboBox, SpinBox, StandardButton, ListView, Button, StandardTableView, ScrollView } from "std-widgets.slint";
import { Validation, IdType } from "validation.slint";
import { BufferLine, TableText } from "custom_widgets.slint";
import { ExpenseData, ExpenseInput, MessageType } from "globals.slint";

enum ExpenseMenuState {modify, totals, view}

export component MainExpenseView inherits Rectangle {
    Text {
        text: "Main";
    }
}

export component ViewExpenseTotalsMenu inherits Rectangle {
    in-out property <ExpenseInput> selected-expense;
    y: 10px;
    Rectangle {
        titles := HorizontalLayout {
            TableText { 
                width: 50px;
                text: "ID";
            }
            TableText { 
                width: 50px;
                text: "Property ID";
            }
            TableText { 
                width: 70px;
                text: "Date";
            }
            TableText { 
                width: 100px;
                text: "Description";
            }
            TableText { 
                width: 100px;
                text: "Expense Type";
            }
            TableText { 
                width: 100px;
                text: "Expense Subtype";
            }
            TableText { 
                width: 100px;
                text: "Amount";
            }
        }
        HorizontalLayout {
            TableText {
                width: 50px;
                text: selected-expense.id;
            }
            TableText {
                width: 50px;
                text: 0;
            }
            TableText { 
                width: 70px;
                text: selected-expense.date;
            }
            TableText { 
                width: 100px;
                text: selected-expense.description;
            }
            TableText { 
                width: 100px;
                text: selected-expense.expense-type;
            }
            TableText { 
                width: 100px;
                text: selected-expense.expense-subtype;
            }
            TableText { 
                width: 100px;
                text: selected-expense.amount;
            }
        }
    }
}

export component AddExpenseMenu inherits Rectangle {
    public function clear-expense-menu() {
        description-input.text = "";
        amount-input.text = "";
        date-input.text = "";
    
        expense-type.current-value = "Select Expense Type";

        expense-action = MessageType.create;
    }

    public function open-expense(expense: ExpenseInput) {
        description-input.text = expense.description;
        amount-input.text = expense.amount;
        date-input.text = expense.date;
        expense-type.current-value = expense.expense-type;
        subtype.current-value = expense.expense-subtype;

        ExpenseData.selected-expense-id = expense.id;
        expense-action = MessageType.update;
    }
    
    public function submit-expense() {
        ExpenseData.potential-expense-id = Validation.get-valid-id(IdType.Expense);
        ExpenseData.new-expense({
            message: expense-action,
            id: expense-action == MessageType.update ? 
                        ExpenseData.selected-expense-id : 
                        expense-action == MessageType.delete ? 
                        ExpenseData.selected-expense-id : 
                        ExpenseData.potential-expense-id,
            description: description-input.text,
            amount: amount-input.text.to-float(),
            date: date-input.text,
            expense-type: expense-type.current-value,
            expense-subtype: subtype.current-value
        });
        clear-expense-menu();
    }
    in-out property <string> expense-subtype-string;
    in-out property <MessageType> expense-action;
    
    border-width: 2px;
    border-radius: 5px;
    border-color: black;
    padding: 10px;

    HorizontalLayout {
        GridBox {
            spacing: 20px;
            padding: 10px;
            y: 10px;
            //preferred-width: parent.width / 2;
            //max-width: parent.max-width;
            height: 50px;
            Text {
                text: "Add expenses";
                col: 0;
                row: 0;
            }
            description-input := LineEdit {
                col: 0;
                row: 1;
                placeholder-text: "Description";
                input-type: InputType.text;
            }
            amount-input := LineEdit {
                col: 1;
                row: 1;
                placeholder-text: "Amount";
                input-type: InputType.decimal;
            }
            date-input := LineEdit {
                col: 2;
                row: 1;
                placeholder-text: "Date";
                input-type: InputType.number;
            }
            Rectangle {
                col: 0;
                row: 2;
                min-width: 100px;
                preferred-width: 150px;
                padding: 5px;
                HorizontalLayout {
                    alignment: LayoutAlignment.start;
                    //max-width: 200px;
                    min-width: 100px;
                    preferred-width: 150px;
                    spacing: 100px;
                    padding: 20px;
                    Rectangle {
                        expense-type := ComboBox {
                            model: [
                                "Select Expense Type", 
                                "Utility", 
                                "Maintenance", 
                                "Other"
                            ];
                        }
                    }
                    Rectangle {
                        subtype := ComboBox {
                            model: [""];
                            enabled: true;
                            states [
                                Utility when expense-type.current-value == "Utility": {
                                    enabled: true;
                                    subtype.model: [
                                        "Water",
                                        "Electricity",
                                        "Garbage",
                                        "Gas",
                                        "Other"
                                    ];
                                }
                                Maintenance when expense-type.current-value == "Maintenance": {
                                    enabled: true;
                                    subtype.model: [
                                        "Repairs",
                                        "Cleaning",
                                        "Landscaping",
                                        "Other"
                                    ];
                                }
                                None when expense-type.current-value != "Utility" && expense-type.current-value != "Maintenance" : {
                                    subtype.enabled : false;
                                }
                            ]
                        }                        
                    }
                }
            }
            Rectangle {
                col: 0;
                row: 3;
                HorizontalLayout {
                    StandardButton {
                        kind: ok;
                        clicked => {
                            submit-expense();
                            clear-expense-menu();
                        }
                    }
                    StandardButton {
                        kind: cancel;
                        clicked => {
                            clear-expense-menu();
                        }
                    }
                    Button {                        
                        enabled: expense-action == MessageType.update ? true : false;
                        text: "Delete";
                        clicked => {
                            expense-action = MessageType.delete;
                            submit-expense();
                        }
                    }
                }
            }
        } 
    }
}

export component ExpenseMenu inherits Rectangle {
    HorizontalLayout {
        Rectangle {
            min-width: 100px;
            max-width: 300px;
            expense-history := Rectangle {
                y: 10px;
                border-radius: 2px;
                border-color: black;
                VerticalLayout {
                    Rectangle {
                        Text {
                            font-size: 14px;
                            text: "Expense History";
                        }
                    }
                    BufferLine {
                        buffer: 10px;
                        line-thickness: 2px;
                    }
                    ListView {
                        padding: 20px;
                        for x in ExpenseData.expenses: expense-button := TouchArea {
                            ta-bg := Rectangle {
                                background: expense-button.has-hover? cornsilk : root.background;
                                Text {
                                    horizontal-alignment: TextHorizontalAlignment.left;
                                    text: x.id + ". " + x.description;
                                }
                            }
                            clicked => {
                                ExpenseData.selected-expense-id = x.id;
                                add-expense-menu.open-expense(x);
                            }
                        }
                    }
                }
            }
        }
        Rectangle {
            min-width: 400px;
            preferred-width: 600px;
            max-width: 1000px;
            property <ExpenseMenuState> current-state: ExpenseMenuState.view;
            VerticalLayout {
                states [
                    View when current-state == ExpenseMenuState.view : {                    
                        add-expense-menu.visible : false;
                        view-totals-menu.visible : false;
                        main-view-menu.visible : true;
                    }
                    Totals when current-state == ExpenseMenuState.totals : {                    
                        add-expense-menu.visible : false;
                        view-totals-menu.visible : true;
                        main-view-menu.visible : false;
                    }
                    Modify when current-state == ExpenseMenuState.modify : {
                        add-expense-menu.visible : true;
                        view-totals-menu.visible : false;
                        main-view-menu.visible : false;
                    }
                ]
                HorizontalLayout {
                    Button {
                        text: "Main View";
                        clicked => {
                            current-state = ExpenseMenuState.view;
                        }
                    }
                    Button {
                        text: "Show Totals";
                        clicked => {
                            current-state = ExpenseMenuState.totals;
                        }
                    }
                    Button {
                        text: "Add/Modify Expenses";
                        clicked => {
                            current-state = ExpenseMenuState.modify;
                        }
                    }
                }
                Rectangle {
                    main-view-menu := MainExpenseView {
                        visible: false;
                    }
                    view-totals-menu := ViewExpenseTotalsMenu {
                        visible: false;
                    }
                    add-expense-menu := AddExpenseMenu {
                        visible: false;
                    }
                }                
            }
        }
    }
}